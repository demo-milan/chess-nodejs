name: CHESS APP
env:
  AWS_REGION: eu-central-1
  CACHE-NAME: cache-node-modules
on:
#   pull_request:
#     branches: 
#       - master
  push:
    branches: 
      - feauture/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:  
    - name: Clone repository 
      uses: actions/checkout@v2
      
    - name: Setup node.js 6.x
      uses: actions/setup-node@v1
      with:
        node-version: 6.x
         
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    
    - name: Gazer dependencies
      run: npm install
      
#     - name: Test app
#       run: npm test 

#     - name: SonarCloud Scan
#       uses: sonarsource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Build production artifact of client-side application 
      run: |
        NODE_ENV=production API_URL=$(aws ec2 describe-instances \
        --region ${{ env.AWS_REGION }} \
        --filter Name=tag:Name,Values=chess-back \
        --output=text |grep ASSOCIATION|uniq -c|awk '{print $5}') \
        npm run build
        
    - name: Zip artifacts
      run: |
       zip backend -r node_modules/ lib/server/ lib/common/
       zip frontend -r lib/client
      
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v2
      with:
        name: frontend
        path: frontend.zip
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v2
      with:
        name: backend
        path: backend.zip 
                
    - name: Status message to Telegram
      uses: yanzay/notify-telegram@v0.1.0
      if: always()
      with:
        chat: ${{ secrets.TG_USER }}
        token: ${{ secrets.TG_TOKEN }}
        status: ${{ job.status }}
